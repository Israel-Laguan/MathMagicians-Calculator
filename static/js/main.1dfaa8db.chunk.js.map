{"version":3,"sources":["style/Button.module.css","style/Display.module.css","style/ButtonPanel.module.css","style/App.module.css","components/Display.js","components/Button.js","components/ButtonPanel.js","logic/operate.js","logic/calculate.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","result","data-testid","className","css","display","defaultProps","Button","name","color","wide","handleClick","type","onClick","button","e","target","buttons","ButtonPanel","map","group","id","key","Math","random","i","operate","numberOne","operation","numberTwo","includes","toString","operand","match","Big","div","plus","minus","X","times","operands","calculate","data","number","total","next","numberA","numberB","numericInput","symbol","symbolOnWait","operandInput","modifier","modifierInput","App","state","bind","buttonName","newState","this","setState","container","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1dfaa8db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Button_cell__GJaJ1\",\"cell-hover\":\"Button_cell-hover__z7opv\",\"button\":\"Button_button__3vmLB Button_cell__GJaJ1 Button_cell-hover__z7opv\",\"color\":\"Button_color__2zwMY\",\"wide\":\"Button_wide__1Qa-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__1ObfC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"ButtonPanel_group__XsVxy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__y0aI6\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from '../style/Display.module.css';\n\n/**\n * Result of Calculation\n * @param {String} result Result of Calculation\n * @return {Node} React Element\n */\nconst Display = ({ result }) => (\n  <div data-testid=\"display\" className={css.display}>\n    {result}\n  </div>\n);\n\nDisplay.propTypes = {\n  result: PropTypes.string,\n};\n\nDisplay.defaultProps = {\n  result: '0',\n};\nexport default Display;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from '../style/Button.module.css';\n\n/**\n * Button of calculator\n * @param {String} name Name of the Button\n * @param {Boolean} color used to customize the color of the button\n * @param {Boolean} wide indicate that the button should have twice the standard width\n * @return {Node} React Element\n */\nconst Button = ({\n  name, color, wide, handleClick,\n}) => (\n  <button\n    type=\"button\"\n    data-testid={name}\n    onClick={() => handleClick(name)}\n    className={`${css.button} ${color ? css.color : ''} ${wide ? css.wide : ''}`}\n  >\n    {name}\n  </button>\n);\n\nButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  color: PropTypes.bool,\n  wide: PropTypes.bool,\n  handleClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  color: false,\n  wide: false,\n  handleClick: e => e.target,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport css from '../style/ButtonPanel.module.css';\n\nconst buttons = [\n  ['AC', '+/-', '%', 'รท'],\n  ['7', '8', '9', 'X'],\n  ['4', '5', '6', '-'],\n  ['1', '2', '3', '+'],\n  ['0', '.', '='],\n];\n\n/**\n * The calculator panel with all the buttons\n * @param {Function} handleClick Event Handler for Click a Button\n * @return {Node} React Element\n */\nconst ButtonPanel = ({ handleClick }) => (\n  <div data-testid=\"button-panel\">\n    {\n      buttons.map((group, id) => (\n        <div key={Math.random()} data-testid={`group-${id + 1}`} className={css.group}>\n          {\n            group.map((name, i) => (\n              <Button\n                name={name}\n                key={Math.random()}\n                color={(id !== 4 || i !== 2) && i !== 3}\n                wide={name === '0'}\n                handleClick={handleClick}\n              />\n            ))\n          }\n        </div>\n      ))\n    }\n  </div>\n);\n\nButtonPanel.propTypes = {\n  handleClick: PropTypes.func,\n};\n\nButtonPanel.defaultProps = {\n  handleClick: () => {},\n};\n\nexport default ButtonPanel;\n","import Big from 'big-js';\n\n/**\n * Perform a simple binary math operation\n * like the ones you found in a Basic Calculator\n * @param {String|Number} numberOne First Operand\n * @param {String} operation Valid operator for a Basic Calculator\n * @param {String|Number} numberTwo Second Operand\n * @returns {String} Numeric answer as String (because of `big-js` constrain)\n */\nconst operate = (numberOne, operation, numberTwo) => {\n  if (!['+', '-', 'X', 'รท'].includes(operation)) {\n    return numberOne.toString();\n  }\n  let operand = numberOne;\n  if (numberOne.toString().match('^\\\\.')) {\n    operand = `0${numberOne}`;\n  }\n  operand = Big(operand);\n  return {\n    'รท': numberTwo === '0' || numberTwo === 0 ? '0'\n      : operand.div(numberTwo).toString(),\n    '+': operand.plus(numberTwo),\n    '-': operand.minus(numberTwo),\n    X: operand.times(numberTwo),\n  }[operation].toString();\n};\n\nexport default operate;\n","import operate from './operate';\n\nconst operands = ['+', 'X', '-', 'รท'];\n\nconst numericInput = (data, number) => {\n  const { total, operation, next } = data;\n  let numberA = total;\n  let numberB = next;\n  if (operands.includes(operation)) {\n    if (!next) numberB = '';\n    numberB += number;\n  } else {\n    if (total === '0') numberA = '';\n    numberA += number;\n  }\n  return {\n    total: numberA,\n    operation,\n    next: numberB,\n  };\n};\n\nconst operandInput = (data, symbol) => {\n  const { total, operation, next } = data;\n  let numberA = total;\n  let symbolOnWait = operation;\n  let numberB = next;\n  if (total !== '0') {\n    if (next) {\n      numberA = operate(total, symbolOnWait, next);\n      numberB = null;\n    }\n  } else {\n    numberB = null;\n  }\n  symbolOnWait = symbol;\n  return {\n    total: numberA,\n    operation: symbolOnWait,\n    next: numberB,\n  };\n};\n\nconst modifierInput = (data, modifier) => {\n  const { total, operation, next } = data;\n  let numberA = total;\n  let symbolOnWait = operation;\n  let numberB = next;\n\n  if (modifier === 'AC') {\n    numberA = '0';\n    symbolOnWait = null;\n    numberB = null;\n  }\n\n  if (modifier === '+/-') {\n    if (next) {\n      if (operands.includes(operation)) {\n        numberB = operate(next, 'X', -1);\n      } else {\n        numberA = operate(total, 'X', -1);\n        numberB = null;\n      }\n      symbolOnWait = modifier;\n    } else {\n      if (total !== '0') {\n        symbolOnWait = modifier;\n      }\n      numberA = operate(total, 'X', -1);\n    }\n  }\n\n  if (modifier === '%') {\n    if (next) {\n      numberA = operate(total, operation, next);\n      numberA = operate(numberA, 'รท', 100);\n      numberB = null;\n      symbolOnWait = modifier;\n    } else {\n      if (total !== '0') {\n        symbolOnWait = modifier;\n      }\n      numberA = operate(numberA, 'รท', 100);\n    }\n  }\n\n  if (modifier === '=') {\n    if (next) {\n      if (operands.includes(operation)) {\n        numberA = operate(total, operation, next);\n      }\n      numberB = null;\n      symbolOnWait = modifier;\n    }\n    if (total !== '0') symbolOnWait = modifier;\n  }\n\n  return {\n    total: numberA,\n    operation: symbolOnWait,\n    next: numberB,\n  };\n};\n\nconst calculate = (data, button) => {\n  const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'];\n  if (numbers.includes(button)) {\n    return numericInput(data, button);\n  }\n  if (operands.includes(button)) {\n    return operandInput(data, button);\n  }\n  const modifiers = ['AC', '+/-', '%', '='];\n  if (modifiers.includes(button)) {\n    return modifierInput(data, button);\n  }\n  return data;\n};\n\nexport default calculate;\n","import React, { Component } from 'react';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\nimport css from '../style/App.module.css';\nimport calculate from '../logic/calculate';\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      total: '0',\n      next: null,\n      operation: null,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(buttonName) {\n    const newState = calculate(this.state, buttonName);\n    this.setState(newState);\n  }\n\n  render() {\n    const { handleClick, state: { next, total } } = this;\n    return (\n      <div data-testid=\"app\" className={css.container}>\n        <Display\n          result={next || total}\n        />\n        <ButtonPanel handleClick={handleClick} />\n      </div>\n    );\n  }\n}\n","/* istanbul ignore file */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* istanbul ignore file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './style/reset.css';\nimport './style/layout.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}